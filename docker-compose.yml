version: "3"

x-local-img-context: &local-img-context


services:
  jupyter:
    build:
      context: ./jupyter
    volumes:
      - ./jupyter/notebook:/home/jovyan/work
    ports:
      - 8888:8888
    environment:
      AWS_ACCESS_KEY_ID: itba-ecd
      AWS_SECRET_KEY: seminario
    command: start.sh jupyter notebook --NotebookApp.token=''

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9001
      KAFKA_JMX_HOSTNAME: kafka
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1

  postgres:
    container_name: postgres
    image: postgres:11
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/scripts:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: workshop
      POSTGRES_USER: workshop
      POSTGRES_PASSWORD: w0rkzh0p
    ports:
      - "5432:5432"

  redis:
    container_name: redis
    image: redis
    restart: always

  # superset:
  #   container_name: superset
  #   image: amancevice/superset
  #   restart: always
  #   depends_on:
  #     - redis
  #     - postgres
  #   environment:
  #     MAPBOX_API_KEY: ${MAPBOX_API_KEY}
  #     SUPERSET_HOME: /etc/superset
  #   ports:
  #     - "8088:8088"
  #   volumes:
  #     - ./superset/conf/superset_config.py:/etc/superset/superset_config.py
  #     - superset:/var/lib/superset

  postgres-airflow:
    container_name: postgres-airflow
    image: postgres:11
    restart: always
    volumes:
      - postgres-airflow-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
    ports:
      - "5434:5432"

  airflow:
    container_name: airflow
    image: puckel/docker-airflow
    restart: always
    depends_on:
      - postgres-airflow
    environment:
      EXECUTOR: Local
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__WEBSERVER__WEB_SERVER_PORT: 9090
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: "Eff80poJxv6LE4432pDC6OmD6N449KCSuhUAMLXiq4U="
    ports:
      - "9090:9090"
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
      - ./airflow/requirements.txt:/requirements.txt

  minio:
    container_name: minio
    image: quay.io/minio/minio
    ports:
      - "9000:9000"
      - "9091:9091"
    volumes:
      - minio-data:/data
    depends_on:
      - kafka
    environment:
      MINIO_ROOT_USER: itba-ecd
      MINIO_ROOT_PASSWORD: seminario
      MINIO_NOTIFY_KAFKA_ENABLE_LANDING: "on"
      MINIO_NOTIFY_KAFKA_BROKERS_LANDING: "kafka:9092"
      MINIO_NOTIFY_KAFKA_TOPIC_LANDING: "landing"
      # MINIO_NOTIFY_KAFKA_SASL_USERNAME_LANDING: "<string>"
      # MINIO_NOTIFY_KAFKA_SASL_PASSWORD_LANDING: "<string>"
      # MINIO_NOTIFY_KAFKA_SASL_MECHANISM_LANDING: "<string>"
      # MINIO_NOTIFY_KAFKA_TLS_CLIENT_AUTH_LANDING: "<string>"
      # MINIO_NOTIFY_KAFKA_SASL_LANDING: "<string>"
      # MINIO_NOTIFY_KAFKA_TLS_LANDING: "<string>"
      # MINIO_NOTIFY_KAFKA_TLS_SKIP_VERIFY_LANDING: "<string>"
      # MINIO_NOTIFY_KAFKA_CLIENT_TLS_CERT_LANDING: "<string>"
      # MINIO_NOTIFY_KAFKA_CLIENT_TLS_KEY_LANDING: "<string>"
      # MINIO_NOTIFY_KAFKA_QUEUE_DIR_LANDING: "<string>"
      # MINIO_NOTIFY_KAFKA_QUEUE_LIMIT_LANDING: "<string>"
      # MINIO_NOTIFY_KAFKA_VERSION_LANDING: "0.10.1.0"
      # MINIO_NOTIFY_KAFKA_COMMENT_LANDING: "<string>"
    command: server /data --console-address ":9091"

  sms-api:
    container_name: sms-api
    build:
      context: api
    volumes:
      - "./api/app.js:/app.js"
      - "./api/SMSSpamCollection:/SMSSpamCollection"
    ports:
      - "3000:3000"
    command: "."

volumes:
  postgres-data:
  minio-data:
  superset:
  postgres-airflow-data:
