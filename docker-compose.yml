version: "3"

services:
  jupyter:
    build:
      context: ./jupyter
    volumes:
      - ./jupyter/notebook:/home/jovyan/work
    ports:
      - 8888:8888
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: itba-ecd
      AWS_SECRET_KEY: seminario
      AWS_SECRET_ACCESS_KEY: seminario
    command: start.sh jupyter notebook --NotebookApp.token=''

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9001
      KAFKA_JMX_HOSTNAME: kafka
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1

  postgres-airflow:
    container_name: postgres-airflow
    image: postgres:11
    restart: always
    volumes:
      - postgres-airflow-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
    ports:
      - "5434:5432"

  airflow:
    container_name: airflow
    image: puckel/docker-airflow
    restart: always
    depends_on:
      - postgres-airflow
    environment:
      EXECUTOR: Local
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__WEBSERVER__WEB_SERVER_PORT: 9090
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: "Eff80poJxv6LE4432pDC6OmD6N449KCSuhUAMLXiq4U="
    ports:
      - "9090:9090"
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
      - ./airflow/requirements.txt:/requirements.txt

  minio:
    container_name: minio
    image: quay.io/minio/minio
    ports:
      - "9000:9000"
      - "9091:9091"
    volumes:
      - minio-data:/data
    depends_on:
      - kafka
    environment:
      MINIO_ROOT_USER: itba-ecd
      MINIO_ROOT_PASSWORD: seminario
      MINIO_NOTIFY_KAFKA_ENABLE_LANDING: "on"
      MINIO_NOTIFY_KAFKA_BROKERS_LANDING: "kafka:9092"
      MINIO_NOTIFY_KAFKA_TOPIC_LANDING: "landing"
    command: server /data --console-address ":9091"

  mlflow:
    build: ./mlflow
    container_name: mlflow
    depends_on:
      - minio
      - mlflow_postgres
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: itba-ecd
      AWS_SECRET_ACCESS_KEY: seminario
    command: mlflow server --backend-store-uri postgresql://postgres@mlflow_postgres/mlflow --default-artifact-root s3://mlflow/ --host 0.0.0.0
    ports:
      - 4000:5000

  mlflow_postgres:
    image: postgres:15
    container_name: mlflow_postgres
    environment:
      POSTGRES_DB: mlflow
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - mlflow-postgres-data:/var/lib/postgresql/data

  sms-api:
    container_name: sms-api
    build:
      context: api
    volumes:
      - "./api/app.js:/app.js"
      - "./api/SMSSpamCollection:/SMSSpamCollection"
    ports:
      - "3000:3000"
    command: "."

volumes:
  mlflow-postgres-data:
  postgres-airflow-data:
  minio-data:
